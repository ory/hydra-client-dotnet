/*
 * Ory Hydra API
 *
 * Documentation for all of Ory Hydra's APIs. 
 *
 * The version of the OpenAPI document: v2.4.0-alpha.1
 * Contact: hi@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ory.Hydra.Client.Client.OpenAPIDateConverter;

namespace Ory.Hydra.Client.Model
{
    /// <summary>
    /// # Ory&#39;s OAuth 2.0 Device Authorization API
    /// </summary>
    [DataContract(Name = "deviceAuthorization")]
    public partial class HydraDeviceAuthorization : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HydraDeviceAuthorization" /> class.
        /// </summary>
        /// <param name="deviceCode">The device verification code..</param>
        /// <param name="expiresIn">The lifetime in seconds of the \&quot;device_code\&quot; and \&quot;user_code\&quot;..</param>
        /// <param name="interval">The minimum amount of time in seconds that the client SHOULD wait between polling requests to the token endpoint.  If no value is provided, clients MUST use 5 as the default..</param>
        /// <param name="userCode">The end-user verification code..</param>
        /// <param name="verificationUri">The end-user verification URI on the authorization server.  The URI should be short and easy to remember as end users will be asked to manually type it into their user agent..</param>
        /// <param name="verificationUriComplete">A verification URI that includes the \&quot;user_code\&quot; (or other information with the same function as the \&quot;user_code\&quot;), which is designed for non-textual transmission..</param>
        public HydraDeviceAuthorization(string deviceCode = default(string), long expiresIn = default(long), long interval = default(long), string userCode = default(string), string verificationUri = default(string), string verificationUriComplete = default(string))
        {
            this.DeviceCode = deviceCode;
            this.ExpiresIn = expiresIn;
            this.Interval = interval;
            this.UserCode = userCode;
            this.VerificationUri = verificationUri;
            this.VerificationUriComplete = verificationUriComplete;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The device verification code.
        /// </summary>
        /// <value>The device verification code.</value>
        /// <example>ory_dc_smldfksmdfkl.mslkmlkmlk</example>
        [DataMember(Name = "device_code", EmitDefaultValue = false)]
        public string DeviceCode { get; set; }

        /// <summary>
        /// The lifetime in seconds of the \&quot;device_code\&quot; and \&quot;user_code\&quot;.
        /// </summary>
        /// <value>The lifetime in seconds of the \&quot;device_code\&quot; and \&quot;user_code\&quot;.</value>
        /// <example>16830</example>
        [DataMember(Name = "expires_in", EmitDefaultValue = false)]
        public long ExpiresIn { get; set; }

        /// <summary>
        /// The minimum amount of time in seconds that the client SHOULD wait between polling requests to the token endpoint.  If no value is provided, clients MUST use 5 as the default.
        /// </summary>
        /// <value>The minimum amount of time in seconds that the client SHOULD wait between polling requests to the token endpoint.  If no value is provided, clients MUST use 5 as the default.</value>
        /// <example>5</example>
        [DataMember(Name = "interval", EmitDefaultValue = false)]
        public long Interval { get; set; }

        /// <summary>
        /// The end-user verification code.
        /// </summary>
        /// <value>The end-user verification code.</value>
        /// <example>AAAAAA</example>
        [DataMember(Name = "user_code", EmitDefaultValue = false)]
        public string UserCode { get; set; }

        /// <summary>
        /// The end-user verification URI on the authorization server.  The URI should be short and easy to remember as end users will be asked to manually type it into their user agent.
        /// </summary>
        /// <value>The end-user verification URI on the authorization server.  The URI should be short and easy to remember as end users will be asked to manually type it into their user agent.</value>
        /// <example>https://auth.ory.sh/tv</example>
        [DataMember(Name = "verification_uri", EmitDefaultValue = false)]
        public string VerificationUri { get; set; }

        /// <summary>
        /// A verification URI that includes the \&quot;user_code\&quot; (or other information with the same function as the \&quot;user_code\&quot;), which is designed for non-textual transmission.
        /// </summary>
        /// <value>A verification URI that includes the \&quot;user_code\&quot; (or other information with the same function as the \&quot;user_code\&quot;), which is designed for non-textual transmission.</value>
        /// <example>https://auth.ory.sh/tv?user_code&#x3D;AAAAAA</example>
        [DataMember(Name = "verification_uri_complete", EmitDefaultValue = false)]
        public string VerificationUriComplete { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HydraDeviceAuthorization {\n");
            sb.Append("  DeviceCode: ").Append(DeviceCode).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  UserCode: ").Append(UserCode).Append("\n");
            sb.Append("  VerificationUri: ").Append(VerificationUri).Append("\n");
            sb.Append("  VerificationUriComplete: ").Append(VerificationUriComplete).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
